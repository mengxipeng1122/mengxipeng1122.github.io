{"posts":[{"title":"A new method to write CModule in Frida for hacking Android applications","text":"Why a new methodI introduced how to use official CModule in Frida at last post. But I think it have some weaknesses to improve. It can use C, this make us need to use ugly mangled function name when we want to call C++ functions We need to embed C code in to Typescript code. So we can not find the error line quickly when C code does not pass compilation. New methodIn here, I will introduce a new method to write a CModule in Frida. Please note, this method only work with Android platform, and I only tested on Arm32 archtecture. In theory, Arm64 archtecture should work either. This method has the following stage: Write a .so using Android NDK Convert .so to a typescript module to hold all informations we needs when we want to load the .so Load .so in Frida and call one function in it.I tried to load .so using Module.load(), but this method always failed on Android platform. I think it because the restrictions of new versions Android, I used Android 10. Write a .so using Android NDKFirst, we write a .so in C++, the following is the code in file main.cpp 1234567891011121314151617181920212223//////////////////////////////////////////////////// declaration of functions in fridaextern &quot;C&quot; void frida_log_callback(const char*);extern &quot;C&quot; void frida_hexdump_callback(void*, unsigned int);//////////////////////////////////////////////////// declaration of functions in libMyGame.sonamespace cocos2d{ struct Application { static Application* getInstance(); std::string&amp; getVersion(); };};extern &quot;C&quot; void fun(void){ frida_log_callback(&quot;Hello World from so&quot;); frida_log_callback(&quot;cocos2d application version:&quot;); const std::string&amp; version = cocos2d::Application::getInstance()-&gt;getVersion(); frida_log_callback(version.c_str()); return ;} Line 3-4, declares functions in Frida. And we need to add a options in our Android.mk LOCAL_ALLOW_UNDEFINED_SYMBOLS := true Without this options, we can not pass the link because the compiler can not find these functions.Line 8-13, declares functions in libMyGame.so. We can use C++ syntax here, and make our code more readable. And we need to declare entire C++ class in libMyGame.so, just declare the functions we want to call.Line 16-23, defines a function for Typescript code to call. It just does the same thing as we did in previous post, print out cocos2d application version string.And we need to set correct options in Application.mk. APP_STL := gnustl_staticAPP_ABI=armeabi-v7a If these options is not compatible with libMyGame.so, our function will crush. Frankly, I tried all APP_STL variables, and finally find only gnustl_static is compatible with this game. Generate a Typescript file hold all information when loadingI wrote a python script. This python scripts use lief to parse .so file to get the following informations. name, machine type segments Only care about segments with load type, discard other segments export symbols relocations ctors This is a list of functions, and we need to call these functions after loading. dtors These functions should be called when unload the .so file, and I have not write code for it now. This script generates final Typescript file using jinja2. The name of the template file is so2tsmodule.jinja Load .so fileI wrote a method, named loadSo, in file soutils.ts. Method prototype as follows 1export function loadSo(info:SoInfoType, syms?:{[key:string]:NativePointer}, libs?:string[]):LoadSoInfoType info is a object we defined in the Typescript file we generated in the last stage. syms is a list of symbols we pass to the load modules libs is a list of library names. This method try to find symbols in these libraries. We need to accomplish the following stages when load .so file: Allocate buffer, and set the permission to rwx Write all segments need to load to the buffer Create a variable to hold all export symbols in the .so file Handle relocations This stage is a little complicated. We need to find symbol addresses, and write correct number in the correct address accord to different recolcaion type. Call ctors Run the function in the .so fileThe following is the Typescript code to do this. And it’s in file sotest.ts 123456789101112131415161718let soname =&quot;libMyGame.so&quot;let m = Process.getModuleByName(soname)let loadm = soutils.loadSo( mysoinfo.info, { frida_log_callback : fridautils.frida_log_callback, frida_hexdump_callback : fridautils.frida_hexdump_callback, }, [ soname, ]);console.log(JSON.stringify(loadm))fridautils.runFunWithExceptHandling(()=&gt;{ let fun = new NativeFunction(loadm.syms.fun,'void',[]) fun();}) Line 3-12, loads the .so file.We need to import generated Typescript file as a module using the following code 1import * as mysoinfo from './mysoinfo' Line 6-7 lists all functions defined in Frida and will be called in C++ codeLine 10 lists all libraries contained the functions will be called in C++ codeLine 16-17 calls function fun in the C++ code. Compile &amp; runI wrote a makefile for compilation.We can use the following command to compile. 1$ make build_sotest And use the following command to run. 1$ make run If everything is OK, we can see the output as follows Hello World from sococos2d application version:1.8.12 ConclusionAll code is in my github.","link":"/2022/06/28/A-new-method-to-write-CModule-in-Frida-for-hacking-Android-applications/"},{"title":"An inlinehook library using Frida","text":"This article introduces an inline hook library using Frida, and you can download all codes about this at this link. And I only implement it on ARM64 architecture. ConceptsIn my opinion, inlinehook just like put a breakpoint in debugger. Users can hook at any instructions, and executes any codes once the hook is triggered. How to implement itBasic steps Put a jump code at the hook point, to jump to our trampoline code. Trampoline code does the following: Save current registers. Invoke hook handler function. Restore all registers. Execute instructions at hook point. Jump back to next instruction after the hook point. Implementation using FrdaHow to add hookBefore add inline hook, user should prepare the following things: Hook point1const hook_ptr = &lt;Address of the instruction will be hooked&gt; ; We can add hooks at any instruction. Hook handle function123const frida_fun = new NativeCallback(function(para1:NativePointer, sp:NativePointer){ console.log('para1', para1, 'sp', sp);},'void',['pointer','pointer']) This function has two arguments, all are of type NativePointer. The first argument is named para1, and we can assign it when we add hook, the second argument is named sp, of value in the sp register, we can access values in the stack by this argument. Memory for trampoline code1const trampoline_ptr = Memory.alloc(trampoline_len) We can allocate a new memory for trampoline code. And because allocated memory is usually far from the hook point, so we have to use a long jump instruction at the hook point. Long jump instruction usually occupies more bytes. For using near jump instruction, we can try to find a cave near the hook point, and use the found cave to store trampoline code. Warning: when we allocate memory, do not use a local variable for the returned pointer, use a global variable instead. Javascript’s garbage collection mechanism will free this memory automatically once the program is out of the local variable’s scope, and will crash the process. Parameter1 pass to hook handle function 1const para1 = &lt;parameter1 pass to hook handle function&gt;; We can pass a parameter to the hook handle function, and this parameter is of type NativePointer Now invoke InlineHooker.inlineHookPatch to add a inline hook, just as follows 1let sz = InlineHooker.inlineHookPatch(trampoline_ptr,hook_ptr, hook_fun_ptr, para1); This function return a number, indicating the length of the trampoline code. Code relocationFor inline hook, we need to move some instructions from one address to another. And we need to rewrite some instructions, just like B/BL instruction in ARM64 architecture.I am using the code in this link for rewriting instructions. I port the C code in this file to Typescript code. This file is my ported code. ARM64 instruction set is relatively easy, and Thumb/Arm32 is too complex, we may port its code in the future.This file exports this method to rewrite code 1export let sh_a64_rewrite=(buf:NativePointer, inst:number, pc:NativePointer ):number=&gt; This method has 3 arguments buf, the target address of current instruction inst, current instruction pc, the source address of current instructionThis method also return a variable of type number, to indicate how many instructions has written to target address. We actually need to rewrite several instructions for one B instruction to avoid change its behavior. ConclusionI wrote an inline hook library using Frida. Inline Hooking is not very easy, specially in some architecture, I only implemented on ARM64, and will do more work on other architecture.","link":"/2022/07/25/An-inlinehook-library-using-Frida/"},{"title":"Frida Android basics","text":"This article introduces the basics about how to use Frida on Android platform. About FridaFrida is a great tool working on Windows, macOS and GNU/Linux allowing you to inject snippets of code into native apps. In this tutorial we’ll use Frida to inject code into Android applications. Frida has 2 work modes, one is client-server, the other is gadget mode. Server modeThe server runs on the Android phone and the client on your computer. Note that you need a phone or an Android emulator that rooted. Frida installationInstalling Frida on your computer is a super easy: 1$ pip install frida-tools Note that the latest Python 3 is recommended. Lets check which version is installed: 1$ frida --version And we need to find the architecture of you phone. 1$ adb shell getprop ro.product.cpu.abi Now, we need to install the server on our Android phone. Visit frida release page, and find a file named like “frida-server-XX.XX.XX-android-YYYY.xz”. ‘XX.XX.XX’ is the version of your installed frida, and YYYY is the architecture of your Android device. Note frida server version should be better to match the frida version on you computer.We uncompress the archive and rename the server to “frida-server”And install the server on the phone: 123$ adb root # might be required$ adb push frida-server /data/local/tmp/$ adb shell &quot;chmod 777 /data/local/tmp/frida-server&quot; Now try to start the server. 1adb shell &quot;/data/local/tmp/frida-server &amp;&quot; Frida testRun the following command to list all applications on your Android device: 1frida-ps -Uai Gadget modeThis mode needs not a rooted android device, but need to repackage APKs you wnat to hack. Download Gadget fileAlso visit frida release page, and find a file named like “frida-gadget-XX.XX.XX-android-YYYY.so.xz”. ‘XX.XX.XX’ is the version of your installed frida, and YYYY is the architecture of your Android device.We uncompress the archive and rename the so to “libgadget.so” Inject libgadget.so to your APKTry to find any native library file in you APK, and inject libgadget.so to it.The following is a Python script to inject libgadget.so, just add libgadget.so as a dependency of a native libraries embedded in the APK. 1234import lief # you can install lief package with `pip install lief`libnative = lief.parse(&quot;libnative.so&quot;) # you should replace libnative.so to you actual so file namelibnative.add_library(&quot;libgadget.so&quot;) # Injection!libnative.write(&quot;libnative.so&quot;) Write a gadget config fileCreate a file name with ‘libgadget.config.so’. and put the following content in it: 123456{ &quot;interaction&quot;: { &quot;type&quot;: &quot;listen&quot;, &quot;on_load&quot;: &quot;wait&quot; }} And copy this file into same directory with your patched libnative.so in. Repackage APK fileThere are many APK repackage utils. I prefer APK easy Tool Frida testIf you install patched APK to your Android device and open it.The app seems it sucks, don’t be worry, it’s waiting for you to run frida client to connect it.Run the following command, you will find a process with a name ‘Gadget’. 1frida-ps -Uai This process just is your patched APK, and we can not see other applications, because we’re not root now Getting started with FridaWrite a javascript file you want to injectThe content of the test javascript file (named tt.js) 1console.log('hello world') Inject javascript code to an Android processFrida provides serval utils to let us life easy. One of them is ‘frida’.Run the following command to connect to your wait process in gadget mode 1frida -U -n Gadget -l tt.js --no-pause You will see a frida shell, and it print ‘hello world’For client/server mode, you should run frida with other options: 1frida -U -f &lt;package name&gt; -l tt.js --no-pause # this command will reopen your app or 1frida -U -n &lt;app title&gt; -l tt.js --no-pause # this command do not reopen your app ConclusionNow we can inject a basic javascript code into an Android app, you can refer frida Javascript documentation for more learning.","link":"/2022/06/25/Frida-android-basic/"},{"title":"Hacking Android game using Frida - Part1","text":"Hacking Android Games with Frida (Part1)Disclaimer:The techniques and information presented in this serial of blogs are strictly for educational purposes. Unauthorized use of these techniques for illicit activities, including game hacking, is strictly prohibited. The author and publisher do not condone or support any form of illegal or unethical behavior. It is essential to respect the intellectual property rights of game developers and adhere to the terms of service. Any actions taken based on the knowledge gained from this blog are solely at the reader’s own risk, and the author and publisher are not liable for any misuse or legal consequences that may arise. Introduction:Mobile gaming has become a massive industry, and many players strive to gain an edge by tweaking or modifying Android games. One powerful tool for game hacking is Frida, an open-source dynamic instrumentation framework. In this serial of blogs, we will guide you through the process of creating a Frida project using TypeScript, enabling you to hack Android games and unlock new possibilities.I will put all source codes in here. The Game for Testing:For the purpose of testing and learning, we will use “MouseBot”, a popular and addictive runner game developed by Vector Unit. You can download the Android version of the game for free from the Play Store here. It’s free. Prerequisites:To follow along with this tutorial, you’ll need the following: A basic understanding of TypeScript. Node.js installed on your machine. A rooed Android device or emulator. Frida installed on your machine. Test game , MouseBot, installed in your machine. Step 1: Setting Up the Project Create a new directory for your Frida project. Open a terminal or command prompt and navigate to the project directory. Create a file named package.json in the project directory. You can view its content from here. Create a file named tsconfig.json in the project directory. You can view its content from here. Install the Frida library for TypeScript and frida-compile by executing the following command, I have write these libraries in this package.json:1npm i Step 2: Writing the Frida Script Inside your project directory, create a new TypeScript file, index.ts: Open the file in your preferred code editor.Write the Frida script to print Hello world to the console.123456const test = ()=&gt;{ console.log('hello world')}console.log('##################################################')test() Step 3: Running the Frida Script Save the game-hack.ts file. Open a terminal or command prompt and navigate to the project directory. Create a file named Makefile in the project directory. Its content is shown as follows:12all: ./node_modules/frida-compile/bin/compile.js -o _agent.js index.ts Compile the TypeScript file into JavaScript using the following command:1make This command will create a file named _agent.js in the project directory. Run the Frida script using the following command: Setup your Android device, start frida-server. This page has detailed instructions for this step. Launch MouseBot on your Android device or emulator. Execute the following command to inject the Frida script into the game process:1frida -U -l _agent.js -n 'MouseBot' If everything goes well, Frida will inject the script into the game process. and you will see Hello world in the console. Conclusion:In this blog, we explored the initial steps of creating a Frida project using TypeScript and injecting a basic Frida script into an Android game. We emphasized the importance of using this knowledge responsibly and for educational purposes only. In the next blog of this series, we will delve deeper into Frida’s capabilities and explore more advanced game hacking techniques. Stay tuned and happy hacking!","link":"/2023/08/29/Hacking-Android-game-using-Frida-Part1/"},{"title":"Hacking Android game using Frida - Part2","text":"Hacking Android Games with Frida (Part2)In the previous blog post, we discussed how to create a Frida Typescript project to interact with an Android game. In this follow-up article, we will delve deeper into the game’s internals by using the NDK (Native Development Kit) and explore the process of hacking Android games using Frida. NDK Version enumerationTo begin, we need to identify the NDK version used to compile the game’s native library (libmain.so). Follow these steps: 1. Navigate to the game data directory on the Android device. The path may vary, but an example path is: 1cd /data/app/com.vectorunit.mercury.googleplay-hN_B8AKQmUeVXiBbDZ2Vvg==/lib/arm64 Note: Replace com.vectorunit.mercury.googleplay-hN_B8AKQmUeVXiBbDZ2Vvg== with the actual game ID on your device. 2. In the game data directory, we can find a file libmain.so. Copy it to PC. 3. Extract strings from libmain.so using the following command: 1strings -tx libmain.so Look for the version strings and commit IDs in the command output. For example: 123ad4dac Android (7714059, based on r416183c1) clang version 12.0.8 (https://android.googlesource.com/toolchain/llvm-project c935d99d7cf2016289302412d708641d52d2f7ee)ad4e4a Android (4691093 based on r316199) clang version 6.0.2 (https://android.googlesource.com/toolchain/clang 183abd29fc496f55536e7d904e0abae47888fc7f) (https://android.googlesource.com/toolchain/llvm 34361f192e41ed6e4e8f9aca80a4ea7e9856f327) (based on LLVM 6.0.2svn)ad4f52 Linker: LLD 12.0.8 (/buildbot/src/android/llvm-r416183/out/llvm-project/lld c935d99d7cf2016289302412d708641d52d2f7ee) Perform a Google search using the version strings and commit IDs to determine the NDK version. In this example, I assume the game was compiled with NDK r17c. 4. Download the according NDK from here, and uncompress it to your PC. NOTE: NDK r17c is an older version and may not work with newer versions of Linux. Refer this page for potential issues of to run clang++ on NDK r17c. The provided solution in that post can help resolve the issue. Create helper function in Typescript for C++ codeNext, we will create two helper functions in Typescript that can be called from C++ code: 1234567891011121314const _frida_log = new NativeCallback(function(sp:NativePointer){ console.log(sp.readUtf8String()); }, 'void', ['pointer']); const _frida_hexdump = new NativeCallback(function(sp:NativePointer, sz:number){ console.log( hexdump(sp, { offset: 0, length: sz, header: true, ansi: false, }) );}, 'void', ['pointer','uint']); _frida_log: This function outputs a string and accepts a pointer to the string. _frida_hexdump:This function performs a hexdump of a block of memory and accepts a pointer to the memory and its length. Build the NDK .so fileTo build the NDK shared library (.so file), follow these steps: Create a subdirectory named jni. Navigate to the jni directory. Create a C++ file named mousebot.cc with the following content:123456789101112extern &quot;C&quot; { void _frida_log(const char* p); void _frida_hexdump(void* p, unsigned int i);}extern &quot;C&quot; int test(void* base){ _frida_log(&quot;Hello from C++ !&quot;); _frida_hexdump(base, 0x20); return 0; } The declarations for the helper functions are enclosed in extern “C” to avoid C++ name mangling. The test function accepts a pointer to memory, calls the helper functions, and returns 0. Create Android.mk file with the following content:1234567891011LOCAL_PATH := $(call my-dir)include $(CLEAR_VARS)LOCAL_MODULE:= mousebotLOCAL_SRC_FILES := mousebot.ccLOCAL_C_INCLUDES := LOCAL_LDLIBS :=LOCAL_CFLAGS= LOCAL_ALLOW_UNDEFINED_SYMBOLS := trueLOCAL_SHARED_LIBRARIES =include $(BUILD_SHARED_LIBRARY) This file instructs NDK to build a shared library. I set LOCAL_ALLOW_UNDEFINED_SYMBOLS to true to avoid compiler to complain about undefined symbols for our defined helper functions. We implements the helper functions in Typescript. We have no library for compiler to link. Create Application.mk file with the following content:12APP_PLATFORM=android-27APP_ABI=arm64-v8a To determine the Android API level of your device, use the following command:1adb shell getprop | grep api_level To determine the CPU ABI, use the following command:1adb shell getporop ro.product.cpu.abi Create Makefile file with the following content:1234567891011ifndef NDKPATH $(error NDKPATH not set)endifall: build_androidbuild_android: ${NDKPATH}/ndk-build V=1clean: ${NDKPATH}/ndk-build clean This Makefile instructs the NDK to build the shared library, while enabling verbose mode with the V=1 flag. Make sure to export the NDKPATH environment variable with the path to your actual NDK installation. By running make, the shared library will be built, and you can find it in the libs/arm64-v8a/libmousebot.so directory. Convert .so file to typescript moduleNext, we’ll convert the generated .so file into a TypeScript module. To accomplish this, we have provided a Python script called so2ts.py, which you can find here. The script performs the following steps: Parse the .so file using LIEF library Generate a .ts file that loads the .so file manually: Allocates memory for the .so file, and loads it into the allocated memory, set ting the permissions to rwx. Applies hot patches to the .so file using the information from the relocation sectin. Invokes constoructors of the .so file. To run the script, execute the following command: 1./utils/so2ts.py -b libs/arm64-v8a/libmousebot.so -o modinfos/libmousebot.ts The generated TypeScript file will be located at modinfos/libmousebot.ts. Call the Test function in TypescriptNow that we have the converted TypeScript module, we can proceed to call the C++ function from TypeScript. Here’s how you can accomplish this: import the generated .ts fileIn your TypeScript code index.ts, import the generated .ts file as follows: 1import {mod as libmousebotinfo} from './modinfos/libmousebot' Load the .so fileAdd the following code to index.ts to load the .so file: 12345678const soname ='libmain.so'const lib = libmousebotinfo.load([ soname,],{ _frida_log , _frida_hexdump , }) In the code snippet above, soname represents the name of the original libmain.so file. Since the game process loads this .so file during boot, we pass soname to libmousebotinfo.load to enable our .so file to resolve symbols from this library. Additionally, we pass _frida_log and _frida_hexdump to libmousebotinfo.load to provide these two functions to our .so file. Call test functionTo call the test function in libmousebot.so, use the following TypeScript code: 12const m = Process.getModuleByName(soname);new NativeFunction(lib.symbols.test, 'int', ['pointer'])(m.base); In the code snippet above, we obtain the base address of libmain.so using Process.getModuleByName. Then, we invoke the test function in libmousebot.so using lib.symbols.test, where lib.symbols includes all the symbols exported by libmousebot.so. Recompile index.ts and inject the Frida scriptWith all the necessary code prepared, we can recompile index.ts and inject the Frida script into the game process. Use the following command: 1frida -U -l _agent.js -n 'MouseBot' When executed, the console will display the following output: 12345##################################################Hello from C++ ! 0 1 2 3 4 5 6 7 8 9 A B C D E F 0123456789ABCDEF7a26ace000 7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 .ELF............7a26ace010 03 00 b7 00 01 00 00 00 d4 04 72 00 00 00 00 00 ..........r..... ConclusionIn this tutorial, we have learned how to build a shared library using the Android NDK and call C++ functions from TypeScript. By leveraging Frida, we successfully integrated the functionalities of libmousebot.so with the existing libmain.so of the game process. This opens up possibilities for further exploration and utilization of Frida’s capabilities. In the next blog post, we will delve deeper into Frida’s extensive feature set and explore how to call functions in libmain.so from our custom libmousebot.so. Thank you for following along! If you have any further questions or need assistance, feel free to reach out.","link":"/2023/08/29/Hacking-Android-game-using-Frida-Part2/"},{"title":"Hacking Android Game using Frida - Part3","text":"Hacking Android Game with Frida (Part3)In the previous blog post, we discussed how to create a NDK project to interact with an Android game. In this follow-up article, we will delve deeper into the game’s internals by call fucntions in libmain.so. Analyzing libmain.soWe have chosen a game for analysis because its libmain.so contains a multitude of interesting functions. To examine the symbols exported by the library, execute the following command: 1readelf -sW libmain.so In our case, the library exports over 36,000 symbols. In theory, we can call each exported symbol using C++. This presents an exciting opportunity for exploration. Conducting Static and Dynamic Analysis of libmain.soBefore calling these functions from C++, it is essential to establish a goal. In our current scenario, our goal is relatively simple: we want to list all assets in the game, including their names and types. To accomplish this, we need to extract relevant class definitions from libmain.so. For static analysis, we will employ Ghidra, while Frida will assist us in adding hooks to key functions for inspecting the game’s internal state and memory data. Please note that this process is complex and time-consuming, but the results are well worth the effort. While we won’t delve into the entire analysis process in this blog, we will share the final results. The following are the classes we extracted for listing all assets in the game: Note: These class definitions are highly dependent on the version of libmain.so used. The MD5 hash of the libmain.so file we worked with is e721395e3e327899a5a55ea4fb422a1c. Additionally, to ensure compatibility with a C compiler and facilitate analysis in Ghidra, I have utilized __cplusplus macros in the code. Ghidra supports C code, and by using these macros, we can import the code into Ghidra for easier analysis. This allows us to leverage Ghidra’s capabilities while working with the codebase. VuAsset1234567891011// VuAssetstruct VuAsset{ void * _vtab; // 0x00#if defined(__cplusplus) std::string _name; // 0x08#else unsigned char _name[0x18];#endif}; The VuAsset class has a member variable, _name, of type std::string at offset 0x08, used to store the names of assets. In the ARM64 platform, a pointer occupies 8 bytes. VuAssetDB12345678910111213// VuAssetDB size 0xe0struct VuAssetDB{ unsigned char _0x0[0x40 ]; // 0x00#if defined(__cplusplus) std::map&lt;std::string, std::vector&lt;std::string&gt;&gt; _assetNames; // 0x40#else unsigned char _assets[0x18];#endif // ...}; The VuAssetDB class contains a member variable of type std::map&lt;std::string, std::vector&lt;std::string&gt;&gt; at offset 0x40, used to store the names of assets. The key of this variable is of type std::string, storing asset type names, while the value is of type std::vector&lt;std::string&gt;, storing asset names of the same type. We will utilize this class to print all asset names and types in the game. VuAssetFactory1234567891011121314151617181920212223242526272829// VuAssetFactory size 0x190struct VuAssetFactory { unsigned char _0x0[0x38 ]; // 0x00#if defined(__cplusplus) std::vector&lt;std::string&gt; _assetTypeNames; // 0x38 std::map&lt;std::string, void*&gt; _assetTypeInfos; // 0x50#else unsigned char _asssetTypeNames[0x18]; unsigned char _asssetTypeInfos[0x18];#endif VuAssetDB* _vuAssetDB; // 0x68 unsigned char _0x70[0x8];#if defined(__cplusplus) std::unordered_map&lt;unsigned int, VuAsset*&gt; _loadedAssets; // 0x78#else unsigned char _asssetTypeNames[0x28];#endif#if defined(__cplusplus) static VuAssetFactory* mpInterface;#endif // ...}; The VuAssetFactory class includes a member variable of type std::vector&lt;std::string&gt; at offset 0x38, used to store asset type names. We can utilize this member variable to print all asset type names. Additionally, this class has a member variable of type VuAssetDB* at offset 0x68 to store the pointer to VuAssetDB. Furthermore, it contains a member variable of type std::unordered_map&lt;unsigned int, VuAsset*&gt; at offset 0x78, used to store loaded assets. The key of this variable is of type unsigned int, representing the asset hash calculated by asset name, and the valueis of type VuAsset*, storing the asset pointer. Lastly, the class includes a static member variable of type VuAssetFactory* to store the global instance of VuAssetFactory. This class follows the singleton design pattern, allowing us to obtain the global VuAssetFactory instance using mpInterface. Helper Function for Obtaining the Actual Class Name of VuAsset ChildrenBased on our analysis, we have observed that VuAsset acts as a base class for other asset-related classes. To simplify our tasks, we have implemented a helper function that allows us to retrieve the actual class names. Please find the code snippet below: 123456static const std::type_info&amp; getTypeInfoOfInstance_ndk(void* p) { p = *(void**)p; p = ((void**)p)[-1]; return *(std::type_info*)p;} Given that libgame.so is compiled with the RTTI (Run-Time Type Information) option, we can utilize the getTypeInfoOfInstance_ndk function to obtain the class information of instances. It’s important to note that we cannot directly use the typeid operator to retrieve runtime type information (RTTI) of an object. This is because libgame.so contains the RTTI information, and when we write our C++ code in libmousebot.so, the typeid operator will provide the RTTI information from libmousebot.so, which may lead to incorrect results. Since we don’t have visibility into how the derived classes of VuAsset are defined, the getTypeInfoOfInstance_ndk function helps us retrieve the accurate class information from libgame.so. Print all assets names and typesNow, it’s time to rock! In this section, we will demonstrate how to print all asset names and types using functions provided by libgame.so. This will serve as a great starting point for exploring Frida’s capabilities and the powerful combination of Frida and C++. Get global pointer to the instance of VuAssetFactoryTo begin, we need to obtain the global pointer to the instance of VuAssetFactory. This can be achieved with the following code snippet: 1auto* pVuAssetFactory = VuAssetFactory::mpInterface; Get the instance of VuAssetDBNext, we retrieve the instance of VuAssetDB using the pointer obtained in the previous step. The code is as follows: 1auto* pVuAssetDB = pVuAssetFactory-&gt;_vuAssetDB; List all assets in VuAssetDBIn this step, we iterate through all the assets in VuAssetDB and print their names and types. The code snippet below demonstrates this process: 1234567 for( auto it = pVuAssetDB-&gt;_assetNames.begin(); it != pVuAssetDB-&gt;_assetNames.end(); ++it){ auto&amp; assetType = it-&gt;first; auto&amp; names = it-&gt;second; for(auto it1=names.begin(); it1!=names.end(); ++it1){ LOG_INFOS(&quot; %s : %s&quot;, assetType.c_str(), it1-&gt;c_str()); }} Here, the LOG_INFOS macro is used to print the asset information, which internally calls the _frida_log function.The resulting output will be similar to the following: 12345&lt;...&gt;[/mnt/work/work.2023/frida-hackinggame/jni/mousebot.cc:104] VuTextureAsset : UI/Icons/Inventory_Prize [/mnt/work/work.2023/frida-hackinggame/jni/mousebot.cc:104] VuTextureAsset : UI/Icons/Inventory_Skin [/mnt/work/work.2023/frida-hackinggame/jni/mousebot.cc:104] VuTextureAsset : UI/Icons/KeyCard_A &lt;...&gt; List All Loaded Assets in the GameIn this final step, we will list all the loaded assets in the game. Although VuAssetDB contains all the assets, it only provides basic information for each asset. During the game runtime, the actual asset data is loaded on demand.The code snippet below demonstrates how to iterate through the loaded assets and print their information: 12345678auto&amp; v = pVuAssetFactory-&gt;_loadedAssets;for(auto it = v.begin(); it != v.end(); ++it){ auto* pAsset = it-&gt;second; auto&amp; k = it-&gt;first; auto&amp; assetTypeInfo = getTypeInfoOfInstance_ndk(pAsset); const char* assetTypeName = assetTypeInfo.name(); LOG_INFOS(&quot; %x pAsset %p assetTypeName %s assetName %s&quot;, k, pAsset, assetTypeName, pAsset-&gt;_name.c_str());} In this code, we use the getTypeInfoOfInstance_ndk function to retrieve the actual class name of each asset instance. The resulting output will be similar to the following: 12345&lt;...&gt;[/mnt/work/work.2023/frida-hackinggame/jni/mousebot.cc:118] e1fc0284 pAsset 0x77e86e1e40 assetTypeName 18VuStaticModelAsset assetName Env/Hall/Straight_16m[/mnt/work/work.2023/frida-hackinggame/jni/mousebot.cc:118] 93b383af pAsset 0x77c03b1f00 assetTypeName 15VuMaterialAsset assetName Paper/Cardboard_Wall[/mnt/work/work.2023/frida-hackinggame/jni/mousebot.cc:118] 9f8e3cbb pAsset 0x77b8be9810 assetTypeName 15VuTemplateAsset assetName Tile_Hall_Hazard/Hall_Hazard_Stomper_2x_16m&lt;...&gt; You can find the complete source code in the repository ConclusionCongratulations! This marks the end of our exploration series. In this final log, we have successfully printed all asset information in the game using the functions provided by libgame.so. This serves as a solid foundation for further exploration of Frida’s capabilities. The combination of Frida and C++ opens up a world of possibilities, allowing us toperform various interesting tasks. With the knowledge gained from this series, you can continue your journey of hacking and exploring the game. Remember, Frida and C++ together are a powerful toolset that can enable us to accomplish a wide range of tasks. The ability to access and manipulate game assets opens up exciting possibilities for customization, analysis, and experimentation. Happy hacking, and enjoy your adventures in the world of game exploration!","link":"/2023/08/31/Hacking-Android-game-using-Frida-Part3/"},{"title":"Hacking Pandora&#39;s Box Game Cartridge 2","text":"DisclaimerThis blog is intended solely for educational purposes. Please refrain from using this information for malicious purposes. IntroductionI recently acquired a new Pandora’s Box game cartridge, which utilizes the RK3128 system-on-a-chip (SOC) from Rockchip. I wanted to share my experience with hacking it.The manufacturer has overclocked it to 1.5GHz to ensure smooth gameplay with HD video filtering. However, due to the increased performance, an additional fan is required for cooling. Fortunately, the cartridge uses an SD card for booting, making it easy to dump the firmware.Here is a photo of the PCB: loaderThe system initiates the “loader” program to extract necessary files and launch the main program, “mkemu.” The manufacturer has placed the “loader” in the initram filesystem of the kernel, which is in CPIO format. Extracting the “loader” binary is a straightforward process.The following code snippet from /etc/init.d/rcS in the initram reveals how the system starts the “loader” program: 1234567891011121314151617181920212223242526272829#!/bin/shPATH=/bin:/sbin:/usr/bin:/usr/sbinrunlevel=Sprevlevel=Numask 022export PATH runlevel prevlevelmount -t tmpfs mdev /devmkdir /dev/ptsmkdir /dev/shmmount -aecho /sbin/mdev &gt; /proc/sys/kernel/hotplugmdev -stouch /dev/mdev.logcd /tmpmkdir -m 1777 .X11-unixcd /lib/modules/3.4.39-h3insmod elib.ko#insmod ch341.kowhile truedo /home/games/loaderdone Analyzing the Loader ProgramI loaded the “loader” program into Ghidra and performed an automated analysis. At address 0x11b10, it becomes evident that the “loader” attempts to mount a LUKS filesystem file: 12sprintf(uStack_620,&quot;echo -n \\&quot;%s\\&quot; | cryptsetup luksOpen /dev/dm-1 pass -&quot;,&amp;DAT_00028c94);system(uStack_620); The LUKS key is stored in ASCII format at address DAT_00028c94 and is calculated using a number read from /dev/elib. The function at 0x14720 includes the code to read the original number from /dev/elib: 12345678910111213141516171819int read_rand_seed(void *data){ int __fd; int iVar1; __fd = open(&quot;/dev/elib&quot;,0); elib_fd = __fd; if (__fd &lt; 0) { iVar1 = -1; } else { iVar1 = ioctl(__fd,0x80045a13,data); iVar1 = iVar1 &gt;&gt; 0x1f; close(__fd); elib_fd = -1; } return iVar1;} Fortunately, the programmer compiled the Linux driver into an individual .ko file instead of including it in the kernel binary. This allows us to easily locate the code responsible for returning the number within the small .ko file. Analyzing elib.koWe can find elib.ko in the CPIO filesystem. By loading it into Ghidra, we can locate the code that handles the 0x80045a13 ioctl code in the elib_ioctl function. Ghidra’s decompiled C code provides the following information: 1234567891011121314151617181920212223242526272829303132333435363738if (param_2 == 0x80045a13) { local_2c = (undefined *)0x0; memset(&amp;local_28,0,0x10); pcVar2 = strstr(saved_command_line,&quot;custom_id=&quot;); if (pcVar2 != (char *)0x0) { pcVar2 = pcVar2 + 10; pcVar3 = strchr(pcVar2,0x20); if (pcVar3 == (char *)0x0) { __n = strlen(pcVar2); } else { __n = (int)pcVar3 - (int)pcVar2; } if (__n &lt; 0x10) { strncpy((char *)&amp;local_28,pcVar2,__n); local_2c = (undefined *)simple_strtoul(&amp;local_28,0,0x10); } } if (local_2c == (undefined *)0x0) { local_2c = (undefined *)0x87654321; } printk(&quot;\\x011custom id: %x\\n&quot;,(uint)local_2c); puVar6 = *(undefined **)(((uint)local_38 &amp; 0xffffe000) + 8); bVar12 = (undefined *)0xfffffffb &lt; param_3; if (!bVar12) { bVar12 = puVar6 &lt; param_3 + 4 || (uint)((int)(param_3 + 4) - (int)puVar6) &lt; (uint)bVar12; } if (!bVar12) { puVar6 = (undefined *)0x0; } if (puVar6 != (undefined *)0x0) { return 4; } ppuVar4 = &amp;local_2c; uVar5 = 4; goto LAB_00010668;}if (param_2 != 0x80045a0b) goto LAB_00010674; And the programmer is lazy, as he hardcoded this sensitive number. It’s 0x87654321. I noticed there is an MCU on the PCB, and I suspected the programmer might have stored the number in the MCU, but he didn’t. Find the key for the LUKS fileNow, it’s time to calculate the key for the LUKS file. I decided to use unicorn engine for this task, I wrote a python script for this task.This script requires the preparation of the file rocky.rsa and the number 0x87654321. The thumb instructions call the standard libc functions, memset and memcpy. I simulate these two functions in the block_hook section. The following is the code: 12345678910111213141516171819if(address==0x10cb4): # void * memset(void *__s,int __c,size_t __n) s = uc.reg_read(UC_ARM_REG_R0) c = uc.reg_read(UC_ARM_REG_R1) n = uc.reg_read(UC_ARM_REG_R2) print('hook memset', hex(s), c, n) uc.mem_write(s, bytes([c]*n)) uc.reg_write(UC_ARM_REG_R0, s) uc.reg_write(UC_ARM_REG_PC, uc.reg_read(UC_ARM_REG_LR))elif(address==0x10d2c): # void * memcpy(void *__dest,void *__src,size_t __n) __dest = uc.reg_read(UC_ARM_REG_R0) __src = uc.reg_read(UC_ARM_REG_R1) __n = uc.reg_read(UC_ARM_REG_R2) #TODO: hack print('hook memcpy', hex(__dest), hex(__src), __n) dat = uc.mem_read(__src,__n) uc.mem_write(__dest,bytes(dat)); uc.reg_write(UC_ARM_REG_R0, __dest) uc.reg_write(UC_ARM_REG_PC, uc.reg_read(UC_ARM_REG_LR)) If the script succeeds, we can get the LUKS key at address 0x28c94. It is a string, and we can use this key to mount the LUKS file on a PC. Decrypt config.dat fileThe function at 0x011dc8 is a decryption function. loader uses it to decrypt config.dat and other configuration files for gaming. I wrote a Python script to perform this decryption. The script saves the resulting file to /tmp/tt.bin. mkemuloader starts mkemu using system. We can find the related instruction at address 0x01153c in loader. The Ghidra decompiled C code is as follows: 12345do { system(&quot;/home/games/mkemu&quot;); puts(&quot;User app exit.&quot;); usleep(10000);} while( true ); Analyzing the mkemu programmkemu is the essential program for this game cartridge. It displays the game selection menu and allows users to play their selected game. After analyzing it using Ghidra, I believe it utilizes SDL. Decrypt assetThe programmer encrypted and packaged the assets in the file asset.dat. Therefore, we need to decrypt the assets using the Thumb instructions in mkemu. You can find the complete Python script in here. This script will save each decrypted asset file in the target folder. ConclusionThis board isn’t very difficult, and I feel like hacking it is similar to participating in a Capture The Flag (CTF) competition. Every key is like a flag. The only difference is that the board is real.","link":"/2023/08/07/Hacking-pandroa-s-box-game-cartridge-2/"},{"title":"How to use CModule in Frida","text":"In this article, I will try to introduce how to use CModule in Frida.My test Android APK is a small game, named “Knife hit”, you can download it from APKpure website. This is a Cocos2d game, it has a native library named ‘libMyGame.so’. This library file has many game logic codes. It exports many functions. We will try to call one of them to get Cocos2d application version and print out it. Why typescript?Later version of Frida support typescript. And Frida provides a demo for starting of typescript coding. It use a NPM package, ‘frida-compile‘, for compiling of typescript code. Using typescript needs a compilation, it might take longer time to test the code, but we can avoid many issues in compilation. So I prefer typescript. What is a CMouduleThis is its official documentation. In my option, we can write some functions in C, and Frida provides a way to invoke these functions. The following is the example in the official documentation. 123456789101112const cm = new CModule(`#include &lt;stdio.h&gt;void hello(void) { printf(&quot;Hello World from CModule\\\\n&quot;);}`);console.log(JSON.stringify(cm));const hello = new NativeFunction(cm.hello, 'void', []);hello(); Line 1-7 create a CModule, it includes C code, and exports one function, ‘hello’ to print a welcome string.Line 9 displays the information of the CModule. Frida is very smart, the C code should be compiled in here. And Frida should load the CModule in the memory space of the target process.Line 11 convert function pointer to a NativeFunction for calling in Frida. So, cm.hello just is a NativePoiner.Line 12 call hello function Write our own CModuleWhy not to use printf?Typescript code and C code is actually run in the target process’ memory space. And Android process usually do not use printf. They use __android_log_print instead. But this function do not print message to Frida, we nee to run adb logcat to check its output. It’s not very convenience. We can write some functions in typescript to let C code to call. Typescript functions for debuggingI wrote several helper functions in typescript, I put them in file fridautils.ts. frida_log_callback1234export let frida_log_callback = new NativeCallback(function(sp:NativePointer){ let s = sp.readUtf8String(); console.log(s)},'void', ['pointer']) This function has one argument of type NativePointer. C code passes a pointer to a string to this function.Line 2 read a string from given address.Line 3 outputs the string to Frida. frida_log_cstring_callback1234export let frida_log_cstring_callback = new NativeCallback(function(pString:NativePointer){ let s = pString.add(0x0).readPointer().readUtf8String(); // get string to a pointer to a std::string object console.log(s)},'void', ['pointer']) Cocos2D stores the version string in a std::string. So we needs a function to extract the actual string from the std::string object and print it.This function has only one argument, it also is of type NativePoiner, but it should be a pointer to a std::string objectLine 2 extracts the actual string from the given std::string object. Note: Android developers can specify different variable in their Application.mk file. Variables APP_ABI, APP_STL may determine different implementations of std::string class. So current method to extract a string may not work correctly when you hack other Android APKs.Line 3 outputs extracted string to Frida. Our own CModuleI wrote a CModule to show the Cocos2D application version string by using the functions has exist in libMyGame.so. I put code it file cmoduletest.ts. Cocos2d functions for get version stringI read the official documentation in Cocos2d website. Class cocos2d::Application has 2 function we can use: static Application* getInstance () doc This function return a pointer to the current application instance. const std::string&amp; getVersion () const doc This function return a std::string reference to the version string. A C++ reference is a pointer in machine code actually. Call Cocos2d functionsThe following is the code 12345678910111213141516171819202122232425262728293031323334let test0 = function() { let soname =&quot;libMyGame.so&quot; let m = Process.getModuleByName(soname) let loadm = new CModule(` void* _ZN7cocos2d11Application11getInstanceEv (); const char* _ZN7cocos2d11Application10getVersionEv(void*); extern void frida_log_callback(const char* s); extern void frida_log_cstring_callback(void*); void fun(void) { frida_log_callback(&quot;Hello World from CModule&quot;); void* pApplication = _ZN7cocos2d11Application11getInstanceEv(); const char* version = _ZN7cocos2d11Application10getVersionEv(pApplication); frida_log_callback(&quot;cocos2d application version: &quot;); frida_log_cstring_callback((void*)version); } `, { frida_log_callback : fridautils.frida_log_callback, frida_log_cstring_callback : fridautils.frida_log_cstring_callback, // cocos2d::Application::getInstance // use this static function to get a pointer to the current Application instance _ZN7cocos2d11Application11getInstanceEv : m.getExportByName(&quot;_ZN7cocos2d11Application11getInstanceEv&quot;), // const char* cocos2d::Application::getVersion(void*) // use this member function of class Application to get a version string _ZN7cocos2d11Application10getVersionEv: m.getExportByName(&quot;_ZN7cocos2d11Application10getVersionEv&quot;), }); console.log(JSON.stringify(loadm)); fridautils.runFunWithExceptHandling(()=&gt;{ let fun = new NativeFunction(loadm.fun, 'void',[]) fun(); })} Line 6-16 is the C code.Line 6-7 declares the Cocos2d functions we will using. Because we are in C, so we only can use mangled function names.Line 8-9 declares the helper functions we created in Typescript.Line 10-16, we create a function named fun to do our actual workLine 12, we get the current application instance address using function cocos2d::Application::getInstance, this function is a static function, and it has no argument, we store the result to variable pApplication;Line 13, we get a pointer to a std::string object using function cocos2d::Application::getVersion, this function is a member function, and it needs a this pointer as its first argument. We just pass variable pApplication to it.Line 14-15. We print version string using helper functions.LIne 19-26. We needs to pass all functions to the CModule using a dictionary. In the dictionary, key is the function name, and value is the function address. We call Module.getExportByName to get the functions address in the libMyGame.so Compile &amp; runI wrote a makefile for compilation.We can use the following cmd to compile. 1$ make build_cmoduletest And use the following cmd to run. 1$ make run If everything is OK, we can see the output as follows Hello World from CModulecocos2d application version:1.8.12This game’s Cocos2d application version is 1.8.12 ConclusionNow, we know how to call the existing functions using CModule. Cocos2D exports a lot of functions in its native library file. We can do many things using these functions.All code is in my github","link":"/2022/06/27/How-to-use-CMoudule-in-Frida/"},{"title":"Inline hook with Frida (Thumb version)","text":"Interceptor.attach in Frida only can hook one function. So the first argument, target, should be a function address. In my opinion, inline hook just let users can hook arbitrary instruction at any address. In this article, I will try to introduce a method to implement inline hook using Frida. and only implement for Thumb binary so far. MethodTo implement inline hook, we need to do the following thing: Save original bytes at hook target Write a hook handle function in .so file in C/C++. Write a trampoline code in Thumb. And put original bytes into trampoline code. Put a BL instruction at hook target. I will describe every stage in detail, and for convenience, I will user the following terminology: Term Description hook_ptr The address of hook target, same as the target argument in Interceptor.attach hook_fun_ptr The address of hook handle function, we define this function in .so file tempoline_ptr The address of trampoline code So if we set every code correctly, once CPU reaches hook_ptr, CPU will call trampoline code as a function. And the trampoline code will call hook handle function and execute the original instruction copy from hook_ptr. And we can do anything we want in hook handle function. Save original bytes at hook_ptrWe will put a BL instruction at this address, so we need to save original bytes at first. In Thumb, a BL instruction occupies 4 bytes. So we need to save at least 4 bytes. It may include 1-2 Thumb instructions at hook_ptr, and we must be careful in selection of a hook_ptr. Avoid odd hook_ptr Do not select a hook_ptr at a middle of a Thumb instruction Do not select a hook_ptr at a 2 bytes Thumb instruction followed by a 4 bytes Thumb instruction I dissembled libMyGame.so with the following command: 1arm-linux-gnueabihf-objdump -S /tmp/libMyGame.so | tee /tmp/libMyGame.s And, there are 2 files named libMyGame.so in this game. We should use libMyGame.so file in the path lib/armeabi-v7a. Because this file is according to Thumb version. I selected hook_ptr at 0x267782: 26777e: 9a03 ldr r2, [sp, #12] 267780: 6823 ldr r3, [r4, #0] 267782: 4630 mov r0, r6 @ here, our hook_ptr 267784: 429a cmp r2, r3 267786: d001 beq.n 26778c &lt;_ZN7cocos2d11Application10getVersionEv@@Base+0x3c&gt; This hook_ptr is in the function cocos2d::Application::getVersion. So when call this getVersion function, just like we did in previous post, CPU should hit this hook_ptr. Now, we saved original bytes 30 46 9a 42.Note: arm-linux-gnueabihf-objdump displays instruction bytes from high address to low address. We also can use hexdump to show instruction byte, it’s in a clearer way. The command is: 1hexdump -C -n 4 -s $((0x267782)) /tmp/libMyGame.so The output should be as follows: 00267782 30 46 9a 42 |0F.B|00267786 Write a hook handle function.The prototype of the hook handle function is as follows, and it’s in the file, main.cpp 1extern &quot;C&quot; void hook_fun(void* baseaddress, void* sp); This function has 2 arguments. The 1st argument, baseaddress, is the base address of the libMyGame.so, and the 2nd argument, sp, is the value int register SP. Trampoline code will pass these 2 arguments to the hook handle function. baseaddress let us can access any data or function in libMyGame.so very easily. Trampoline code will store most CPU registers in the stack, so we can access these register values using sp. Write trampoline codeThis code is in Thumb assembly. I list the code in here, and I put the offset of instructions at the beginning of every line. 12345678910111213141516171819200x0: push {r0, r1, r2, r3, r4, r5, r6, r7}0x2: push.w {r8, sb, sl, fp, ip, lr}0x6: mrs r0, apsr0xa: push {r0}0xc: nop0xe: mov r1, sp0x10: ldr r0, [pc, #0x14] @ --&gt; 0x280x12: ldr r4, [pc, #0x18] @ --&gt; 0x2c0x14: blx r40x16: pop {r0}0x18: msr cpsr_fc, r00x1c: pop.w {r8, sb, sl, fp, ip, lr}0x20: pop {r0, r1, r2, r3, r4, r5, r6, r7}0x22: nop0x24: nop0x26: bx lr0x28: nop0x2a: nop0x2c: nop0x2e: nop 0x0-0xa, save registers to stack, r0-r12, LR , and CPSR. We can learn more on ARM registers with this page.0xe, set the 2nd argument,0x10, set the 1nd argument, we load the 1st argument from 0x28, and we will put the base address of libMyGame.so at 0x28 using Frida.0x12, load the address of the hook handle function to R4, and we will put hook_fun_ptr at 0x2c using Frida.0x14, call hook handle function0x16-0x20, load registers from stack.0x22-0x24, run original instructions at here. We will put saved original bytes at here using Frida.0x26, return0x28-0x2a, We store the base address of libMyGame.so at here.0x2c-0x2e, We store the address of hook handle function at here.Whole trampoline code occupies 0x30 bytes. About selection of trampoline_ptrWe can simple using Memory.alloc for trampoline code. Actually, we use near call instruction. This makes trampoline_ptr can not be too far from hook_ptr. We can find a cave to put our trampoline code in libMyGame.so. CAVE MINER is a great tool for this task. But I just do it manually for this sample case. I use the following command to list all segments in libMyGame.so: 1readelf -l /tmp/libMyGame.so The following is the output snippet: Type Offset VirtAddr PhysAddr FileSiz MemSiz Flg AlignPHDR 0x000034 0x00000034 0x00000034 0x00120 0x00120 R 0x4INTERP 0x000154 0x00000154 0x00000154 0x00013 0x00013 R 0x1 [Requesting program interpreter: /system/bin/linker]LOAD 0x000000 0x00000000 0x00000000 0x691630 0x691630 R E 0x1000LOAD 0x691f38 0x00692f38 0x00692f38 0x36b0c 0x42fac RW 0x1000DYNAMIC 0x6bc6c8 0x006bd6c8 0x006bd6c8 0x00150 0x00150 RW 0x4 The first load segment is end at 0x691630, and the second load segment is begin at 0x691f38. So cave at 0x691630 is perfect for our tempoline code. Put a BL instruction at hook target.We just use a near instruction to call trampoline code at hook_ptr, using thumbwriter in Frida for this. SummaryI wrote a method in patchutils.js, it’s defined as follows: 1export function putThumbHookPatch(trampoline_ptr:NativePointer, hook_ptr:NativePointer, hook_fun_ptr:NativePointer, para1:NativePointer, origin_inst?:number[]):number The 1st argument, trampoline_ptr is the address of trampoline code The 2nd argument, hook_ptr is the address of hook target The 3rd argument, hook_fun_ptr is the address of our hook handle function The 4th argument, para1 is the 1st parameter to our hook handle function, it will be assign to base address of libMyGame.so in caller The 5th argument, origin_inst is the saved original bytes at hook_ptrAnd it returns the length of the trampoline codeI also wrote a test method in inlinehooktest.ts. Compile &amp; runI wrote a makefile for compilation.We can use the following command to compile. 1$ make build_inlinehooktest And use the following command to run. 1$ make run If everything is OK, we can see the output as follows. Hello World from sococos2d application version:#################### Hook Begin ##############################hook function from sobaseaddress 0xc8902000 CPSR 0x600e0010 R8 0x00000000 R9 0xbbdf8c18 R10 0xbbdf8b80 R11 0xbbdf8b90 R12 0xf3811ce8 LR 0xc8b69787 R0 0xbbdf8b70 R1 0x05c43127 R2 0x05c43127 R3 0x05c43127 R4 0xf3813260 R5 0xbbdf8b70 R6 0xdcc854b8 R7 0xbbdf8b88#################### Hook end ##############################1.8.12 The hook handle function just do the following, print base address dump values of all registers stored in the stack ConclusionThis method still has many way to improve. And it only support Thumb. If you have any idea or issues, please feel free to let me know. I’m always glad to hack and discuss with others.All code is in my github.","link":"/2022/06/29/Inline-hook-with-Frida-Thumb-version/"},{"title":"frida-mod  tutorial","text":"This tutorial introduces how to use frida-mod.Frida-mod is trying to make us access functions more easily using Frida. We can call functions, hook and unhook functions.These functions can come from: Existing modules, the process has loaded these modules after boot. I will call this is get mode. Our modules, we can write these modules in C/C++, and it only supports 2 file formats. .so files and .dll files. I will call this is load mode. Prepare C/C++ source codes.get modeFor demonstraction, I wrote sprintf function prototype in file libc.h. For simplicity, we’d better make these source files not depend on other files. load modeIn theory, we can use module source codes directly, but because we use llvm to parse source code for further process, this compiler may be different than the compiler you compile the actual module. So we may need to do some modifications on it. Generate typescript wrapper code.I wrote a python util to generate typescript wrapper code. It’s modinfo2ts.py. You can run modinfo2ts.py --help to get its help page. get mode1./utils/modinfo2ts.py -m get -o modinfos/libc.ts source/libc.h -m flag specifies mode, get mode is for the existing module;-o flag specifies the output typescript file name;the last argument is the source file, and it supports multiple source files; load mode1./utils/modinfo2ts.py -m load -b c/bins/win64.dll -o modinfos/libwin64.ts c/mod_win.cc -m flag specifies mode, load mode is for our own modules;-b flag specifies compiled module binary file;-o flag specifies the output typescript file name;the last argument is the source file, and it supports multiple source files, I use module source code here; The generated code exports a mod variable. Test generated typescript moduleI wrote index.ts to test generated TS module.We need to import module as follows 1234567import { mod as libcmodinfo } from './modinfos/libc'import { mod as liblinux_x64info } from './modinfos/liblinux_x64'import { mod as liblinux_x86info } from './modinfos/liblinux_x86'import { mod as libarm64info } from './modinfos/libarm64'import { mod as libarm32info } from './modinfos/libarm32'import { mod as libwin64info } from './modinfos/libwin64'import { mod as libwin32info } from './modinfos/libwin32' We need to use the alias to avoid the dupulcation of mod names. Get modeFunction testLibcSprintf calls sprintf function in libc module. 1234567891011// we need to specify the actual module name in here. // use the following code to get the module containing `sprintf`// let p = Module.getExportByName(null,'sprintf)// let m = Process.getModuleByAddress(p); // console.log(JSON.stringify(m))let libc = libcmodinfo.get(modname);let buff = Memory.alloc(Process.pageSize);// use libc.functions.sprintf.call to call sprintflibc.functions.sprintf.call(buff, Memory.allocUtf8String(&quot;%s %d&quot;), Memory.allocUtf8String('1 + 2 ='), ptr(1+2));let resStr = buff.readUtf8String();console.log('result', resStr); Load modeFunction testLibAdd call add function implemented in our module load moduleI try to explain how to load the module on arm64 platform here. The passed parameters are slightly different on every platform. 1234567891011121314let lib = libarm64info.load( [ // an array of depended libraries. load function will try to resolve symbols at these libraries. ], { // a map for symbols, the key is symbol name, the value is symbol address, // we can pass our defined frida NativeCall to the loaded module, // and we can set some never used symbols to null. _frida_puts : _frida_puts, _ITM_registerTMCloneTable : ptr(0), _ITM_deregisterTMCloneTable : ptr(0), __gmon_start__ : ptr(0),}); Call functions in our module123456let a = 2;let b = 3;lib.functions.add.hook(); // hook add function let res = lib.functions.add.call(a,b); // call add function lib.functions.add.unhook(); // unhookconsole.log('res', res); ConclusionI introduced how to access functions in modules using frida-mod. Hope this util can help you write frida code easier. Todo Fix the bug on win64 platform support variable access support struct parsing","link":"/2022/12/24/frida-mod-tutorial/"},{"title":"Hacking pandroa&#39;s box game cartridge 1","text":"DisclaimerThis blog is only for educational purposes. Never use these info for bad. IntroductionPandora’s box multi-game cartridge is a popular product from China. This cartridge usually has 1000+ retro arcade games. It supports Jamma and HDMI. Users can enjoy old-time games with it. And some newer versions of it have more than 10,000 games, and support some home console games. Many manufactures from China have the ability to design and product Pandora’s box multi-game cartridge. They always add software protection to prevent others from cloning their efforts.Recently, I got a newer version of PB boards. And I hacked it. I will introduce the steps of how I hacked this board.The PCB is as follows:I uploaded all code to github Tools/Packages I used strings is a GNU util to output all printable strings in files. file is a GNU util to determine files type. binwalk is a easy way to extract firmware from an image file. Ghidra is a great suite for disassembling and decompiling binary from variety platforms. Unicorn is a lightweight multi-platform, multi-architecture CPU emulator framework. Inspect imageThis board uses Amlogic s805. This SOC is old, and not very powerful for running some 3D games. I think the manufaturer selected this SOC only beacause it’s cheap. This SOC only cost near to $1 if they select to use second-hard ICs.This board has s805, a memory IC, and no EMMC IC. It has a TF card of size 32GB, this board uses TF card boot mode.The TF card has 2 partitions, shown as the following: 1234567891011$ fdisk -l pb1.imgDisk pb1.img: 29.57 GiB, 31739999744 bytes, 61992187 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisklabel type: dosDisk identifier: 0x00007577Device Boot Start End Sectors Size Id Typepb1.img1 8192 1441791 1433600 700M 6 FAT16pb1.img2 1441792 60440575 58998784 28.1G c W95 FAT32 (LBA) I mounted partition 1 to check its files: 1234567891011$ sudo mount -oloop,ro,offset=$((8192*512)) pb1.img /mnt/disk$ ls /mnt/disk -ltotal 684384-rwxr-xr-x 1 root root 1843272 9月 26 2021 logicalcircuit-rwxr-xr-x 1 root root 60268 9月 26 2021 logo_en.png-rwxr-xr-x 1 root root 60268 9月 26 2021 logo_ko.png-rwxr-xr-x 1 root root 60268 9月 26 2021 logo.png-rwxr-xr-x 1 root root 6678528 9月 26 2021 rxnv-rwxr-xr-x 1 root root 314572800 1月 3 18:26 rxtedrwxr-xr-x 2 root root 16384 4月 18 2022 'System Volume Information'-rwxr-xr-x 1 root root 377487360 1月 3 18:26 user And checked the file type using file 123456789$ file /mnt/disk/*/mnt/disk/logicalcircuit: PC bitmap, Adobe Photoshop with alpha channel mask, 1280 x 720 x 16/mnt/disk/logo_en.png: PNG image data, 500 x 120, 8-bit/color RGBA, non-interlaced/mnt/disk/logo_ko.png: PNG image data, 500 x 120, 8-bit/color RGBA, non-interlaced/mnt/disk/logo.png: PNG image data, 500 x 120, 8-bit/color RGBA, non-interlaced/mnt/disk/rxnv: data/mnt/disk/rxte: LUKS encrypted file, ver 1 [aes, xts-plain64, sha256] UUID: 3929e3d8-a638-4b24-93d7-a459b77ac901/mnt/disk/System Volume Information: directory/mnt/disk/user: LUKS encrypted file, ver 1 [aes, xts-plain64, sha256] UUID: 85dbb20b-1880-422f-b4e7-6564b1d13abb It shows file rxnv maybe encrypted.I uploaded the TF card image file here. And I striped partition 2 to save room. Analyse U-bootU-boot has many versions. We should find U-boot in s805 SDK. I find Odroid C1 is using s805. And I can find partitions table here. Download related U-boot source codeAs this page shows, we can download U-boot source from github 1$ git clone https://github.com/hardkernel/u-boot.git -b odroidc-v2011.03 Extract U-boot binaryWe can extract U-boot from the image accord to partitions table 1234$ dd if=pb1.img skip=64 count=$((8192-64)) of=uboot.bin# 8192 is the start block of the paration 1$ file uboot.bin uboot.bin: UCL compressed data If we compile U-boot successfully, we can get a tool build/tools/uclpack to decompress UCL data. I guess UCL is the special package format for s805. 123456789101112$ build/tools/uclpack -d uboot.bin uboot.bin.decompressedUCL data compression library (v1.03, Jul 20 2004).Copyright (C) 1996-2004 Markus Franz Xaver Johannes Oberhumerhttp://www.oberhumer.com/opensource/ucl/uclpack: block-size is 262144 bytesuclpack: decompressed 340268 into 740288 bytes$ file uboot.bin.decompressed uboot.bin.decompressed: data file can not recognize U-boot type. But strings can still give us some useful info. 12345678$ strings -tx uboot.bin.decompressed &lt;...&gt; a9b72 switch_bootmode=if test ${reboot_mode} = factory_reset; then run recovery;else if test ${reboot_mode} = update; then run update; else if test ${reboot_mode} = usb_burning; then run usb_burning;else if test ${wipe_data} = failed; then echo wipe_data=${wipe_data}; run recovery;else fi;fi;fi;fi a9c98 prepare=logo size ${outputmode}; video open; video clear; video dev open ${outputmode};if fatload mmc 0 0x13000000 logicalcircuit; then bmp display 0x13000000; bmp scale;fi; a9d46 storeboot=echo Rx Booting...; if unifykey get usid; then setenv bootargs ${bootargs} androidboot.serialno=${usid};fi;echo [Maple] read info...; if mmcinfo; then if fatload mmc 0 ${loadaddr} rxnv; then setenv bootargs ${bootargs} bootfromsd; bootm;fi;fi; echo failed...; run recovery a9e62 recovery=echo enter recovery;if mmcinfo; then if fatload mmc 0 ${loadaddr} recovery.img; then bootm;fi;fi; if usb start 0; then if fatload usb 0 ${loadaddr} recovery.img; then bootm; fi;fi;if imgread kernel recovery ${loadaddr}; then bootm; else echo no recovery in flash; fi; a9f77 usb_burning=update 1000&lt;...&gt; At 0xa9d46, storeboot environment variable shows U-boot load rxnv file using fatload command, and runs it using bootm. Now I can be sure rxnv actually is the kernel, and it should be encrypted. fatload should have code to decrypt it, or the kernel will not boot. Locate decrypt codes in U-bootNow, open uboot.bin.decompressed with Ghidra. I can get U-boot will be loaded at 0x10000000 by check file build/u-boot.map in U-boot source code.That’s the funnest part during the whole hacking. Inspect disassemble code with source code. To make analysis easier, I wrote a header file uboot.h. This file includes some structure definitions. We can import this file into ghidra.After hours of efforts, I found the codes to decrpyt rxnv, it’s at 0x10064aec-0x10064f2c, shown as follows:.And these codes mainly do the following things: Check the name of the file currently loading, if it is rxnv then decrytpt; It seems to prepare key in the first loop; Decrypt data in the sencode loop;And I found ghidra’s register renaming makes it not very easy to know the actual register name in every assembly instruction, just like instruction mov maxsize, #0x4 at 0x10064af0. We can use Patch Instruction menu item in the context menu to check the original instructions. Decrypt data using code in U-bootLet’s decrypt rxnv using the code we found. I worte a python script for this work. This python script uses unicorn to emulate ARM instructions in U-boot to decrypt rxnv file. Create an ARM emulator1mu = Uc(UC_ARCH_ARM, UC_MODE_ARM) Allocate memory12345678mu.mem_map(code_ptr, 0x10000000); # code_ptr= 0x10000000, I will put U-boot binary in heremu.mem_map(data_ptr, 0x10000000); # data_ptr= 0x20000000, I will put encrypted data in here;mu.mem_map(alloc_ptr, 0x10000000); # alloc_ptr= 0x30000000, this rangion if for malloc/free functionsmu.mem_map(0 , 0x00200000); # this is stack, and set sp_ptr = 0x00100000 Load data123456# load ubootmu.mem_write(code_ptr, open('uboot.bin','rb').read())# load datadata = open('rxnv','rb').read();datalen = len(data);mu.mem_write(data_ptr, data); Write hook codes1234567891011121314151617181920212223# callback for tracing basic blocksdef hook_block(uc, address, size, user_data): if address == 0x10016248: # hook malloc, emulate malloc function, sz = uc.reg_read(UC_ARM_REG_R0); global alloc_ptr; ret = alloc_ptr; alloc_ptr+=sz; uc.reg_write(UC_ARM_REG_R0, ret); # write return value, a pointer to allocated memory uc.reg_write(UC_ARM_REG_PC, uc.reg_read(UC_ARM_REG_LR)); elif address == 0x10015fec: # hook free, do nothing uc.reg_write(UC_ARM_REG_PC, uc.reg_read(UC_ARM_REG_LR)); elif address == 0x10015bc8: # hook printf , actual printf function will access to serial port, so I emulate this function to avoid hardware operations. Unicorn is a great tool to emulate CPU, but is not very easy to implement serial ports. fmt = uc.reg_read(UC_ARM_REG_R0); bs = uc.mem_read(fmt, 0x100); s = bs.decode('utf-8').split('\\0')[0]; print(s) # only print the first arguments uc.reg_write(UC_ARM_REG_PC, uc.reg_read(UC_ARM_REG_LR)); elif address == 0x10064d14: # This is at the begin of the second loop, print loop variable and total loop counter to show decrypt progress n1=struct.unpack('I', uc.mem_read(uc.reg_read(UC_ARM_REG_SP)+0x18,4))[0] n2=struct.unpack('I', uc.mem_read(uc.reg_read(UC_ARM_REG_SP)+0x28,4))[0] print('go here', n1, n2);# tracing all basic blocks with customized callbackmu.hook_add(UC_HOOK_BLOCK, hook_block) Initialize registers and variables in the stack.1234567mu.reg_write(UC_ARM_REG_R5, datalen ) # datalen is length of the encrpyted datamu.reg_write(UC_ARM_REG_R4, 0x100abc80) # d = 0x100641d4+[0x10064f48]mu.reg_write(UC_ARM_REG_R0, 0 ) #mu.reg_write(UC_ARM_REG_SP, sp_ptr ) # set stack register# set maxsize mu.mem_write(sp_ptr+0x34, struct.pack('I', 0x800000)); # this variable should be greater than datalen;mu.mem_write(sp_ptr+0x2c, struct.pack('I', data_ptr)); # data_ptr is the pointer to encrypted data; Emulate 123ADDRESS0 = 0x10064b00ADDRESS1 = 0x10064f2cmu.emu_start(ADDRESS0, ADDRESS1, count=-1) Save decrypted data1open('rxnv.decrypted','wb').write(mu.mem_read(data_ptr, datalen)) # now, data_ptr points to the decrypted data Please note: this script may take a long time to run. I tested it with my PC,(Intel(R) Core(TM) i5-9400 CPU @ 2.90GHz , 6 cores, 16GB DDR), and it took 15 minutes, so I printf loop variable at 0x10064d14.Now, we check decrypted rxnv.12$ file rxnv.decrypted rxnv.decrypted: Android bootimg, kernel (0x10008000), ramdisk (0x11000000), second stage (0x10f00000), page size: 2048 It’s a packaged Android kernel. Analyse KernelI use binwalk to extract data from rxnv.decrypted 123456789$ binwalk -e rxnv.decrypted DECIMAL HEXADECIMAL DESCRIPTION--------------------------------------------------------------------------------0 0x0 Android bootimg, kernel size: 2986048 bytes, kernel addr: 0x10008000, ramdisk size: 3664373 bytes, ramdisk addr: 0x11000000, product name: &quot;&quot;2048 0x800 uImage header, header size: 64 bytes, header CRC: 0x71E73C6F, created: 2022-05-19 17:19:01, image size: 2985984 bytes, Data Address: 0x208000, Entry Point: 0x208000, data CRC: 0x9502FBF, OS: Linux, CPU: ARM, image type: OS Kernel Image, compression type: gzip, image name: &quot;Linux-3.10.99&quot;2112 0x840 gzip compressed data, has original file name: &quot;ccImage&quot;, from Unix, last modified: 2022-05-19 17:19:002990080 0x2DA000 gzip compressed data, from Unix, last modified: 2022-05-19 17:19:016656000 0x659000 device tree image (dtb) The -e flag will extract recognized data to floder _rxnv.decrypted.extracted;Check extracted files: 1234567$ ls -l _rxnv.decrypted.extracted/total 13232-rw-rw-r-- 1 mxp mxp 7429120 1月 4 14:05 2DA000-rw-rw-r-- 1 mxp mxp 6117776 1月 4 14:05 ccImage$ file _rxnv.decrypted.extracted/*_rxnv.decrypted-0.extracted/2DA000: ASCII cpio archive (SVR4 with no CRC)_rxnv.decrypted-0.extracted/ccImage: data 2DA000 is a cpio archive. Use the following commands to depack it; 1234$ mkdir cpio.files$ cd cpio.files/$ sudo cpio -i &lt; ../2DA000 14510 blocks ccImage should be the kernel binary. Anslyse init script in KernelI checked the init file in the cpio archive. and it’s actually a bash script, and I found commands to mount rxte and user 12345678debug_msg &quot;校验运行1&quot;cryptsetup luksOpen /flash/rxte rxsys -d /usr/lib/system.key &amp;debug_msg &quot;校验运行2&quot;cryptsetup luksOpen /flash/user user -d /usr/lib/system.key &amp;debug_msg &quot;准备挂载&quot;mount_part &quot;/dev/mapper/rxsys&quot; &quot;/sysroot&quot; &quot;rw,loop&quot;debug_msg &quot;挂载user&quot;mount_part &quot;/dev/mapper/user&quot; &quot;/sysroot/userdata&quot; &quot;rw,loop&quot; Recover true root file systemRun the same commands to mount rxte and user file, we can get actual rootfs. 1234sudo cryptsetup luksOpen rxte rxsys -d _rxnv.decrypted.extracted/cpio.files/usr/lib/system.keysudo cryptsetup luksOpen user user -d _rxnv.decrypted.extracted/cpio.files/usr/lib/system.key sudo mount /dev/mapper/rxsys /mnt/disk -o &quot;rw,loop&quot;sudo mount /dev/mapper/user /mnt/disk1 -o &quot;rw,loop&quot; Now we have hacked this board. ConclusionFinally, I hacked this board, The primary part is to decrypt rxnv using unicorn. We need not to rewrite instructions in C or Python. All we need to do is emulate the ARM instructions correctly.","link":"/2023/01/04/hacking-pandroa-s-box-game-cartridge-1/"},{"title":"Identifying the NDK Version of a .so File","text":"IntroductionThis blog post aims to provide a method for accurately identifying the version of the NDK (Native Development Kit) used in a .so file within the Android platform. MethodologyIn certain situations, it becomes necessary to confirm the specific NDK version utilized in the .so files of an APK. Once achieve this, we can compile our own binary code using the same NDK version and subsequently patch the resulting binary into the .so files in order to accomplish our objectives. It is crucial to note that using a different version of the NDK may lead to ABI (Application Binary Interface) incompatibility issues with our binary. Test Case: “Rise of Saiyan” Android GameFor the purpose of illustration, we will employ the Android game called “Rise of Saiyan.” You may download the game from the following link: Rise of Saiyan. Within this game, there exists a shared library file named libcocos2dlua.so. Locating the Magic WordThe initial step involves finding the magic word, which in this case is “Android”. We can accomplish this by executing the following command: 12$ strings -tx libcocos2dlua.so | grep &quot;Android$&quot;13ab850 Android As demonstrated, we successfully discovered the magic word located at offset 0x13ab850. Extracting the NDK Version StringNext, we proceed to extract the NDK version string by hexdumping the content beginning from the identified offset: 1234$ hexdump -C -n 30 -s $((0x13ab850)) libcocos2dlua.so013ab850 41 6e 64 72 6f 69 64 00 15 00 00 00 72 32 31 65 |Android.....r21e|013ab860 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |..............|013ab86e By analyzing the hexdump, we successfully identified the NDK version string as r21e. This information allows us to download the corresponding NDK version. ConclusionIn conclusion, this blog post presents a straightforward method for identifying the NDK version string within a .so file. By following the outlined steps, developers can accurately determine the NDK version and proceed with their required tasks effectively and efficiently.","link":"/2024/01/07/How-to-indentify-NDK-version-of-a-so/"},{"title":"Hacking Cocos2D Android Games using Frida","text":"DisclaimerPlease note that the information provided in this blog post is intended for educational and informational purposes only. Any application of the techniques and tools mentioned in this post must be carried out responsibly and in accordance with local and international regulations and laws. Attempting to hack software, including games, without express permission from the owners is strictly illegal and unethical. The author and the publishers of this blog do not condone, encourage or endorse any illegal activity, and any actions taken based on the contents of this blog will be solely at your own risk. We strongly encourage readers to use this information to enhance their understanding of the underlying mechanisms of software and to promote improved security, rather than for ulterior purposes. This blog, its author, and its publishers bear no responsibility for misuse of the information provided. IntroductionHey there! Ever wondered how exciting it would be to peek under the hood of your favorite Android games, particularly the ones built using cocos2d? Well, this blog post will walk you through just that. But we’re not talking about cheats or shortcuts, we’re diving into game hacking — the good kind. First off, why cocos2d? It’s a user-friendly, open-source software perfect for building games. On the other hand, Frida is a programmer’s secret weapon, akin to a multi-tool. It’s a powerful toolkit that allows you to weave your code seamlessly into an already-running process. This incredible ability to inject and inspect code in real-time, without causing a ruckus, makes Frida an essential instrument for any coder’s toolbelt. Now, don’t worry if you aren’t a coding whiz. This guide is meant for anyone curious about how games work. A basic grip on the Android system, a touch of Typescript, a little bit of C++ and a whole lot of enthusiasm are all you need to level up. Ready for the ride? Let’s get started! Create C++ module for hackingTo illustrate, I make use of a 2D game. This game adopts a unique format, defined by its developers, to house its animations. The asset files associated are denoted with a .ROM extension. Each of these asset files can encompass multiple actions. In turn, each action is made up of several steps. Intriguingly, each step in this context represents an image. These images, which constitute the steps, might exhibit differing dimensions. I plan on developing a C++ module that can be injected into the process for hacking. A detailed outline of this procedure can be found on my blog post. Static analysisStatic analysis, also known as code review, is the process of examining source code without executing it, focusing instead on its structure, dependencies, and patterns. It is a widely accepted preliminary step in understanding the functionality of any software or application, including games built on frameworks like cocos2d. Begin by familiarizing yourself with the cocos2d framework. Cocos2d is an open-source software development kit for developing games and other graphical applications. I can get cocos2d’s code from here: github.com/cocos2d/cocos2d-x. Thoroughly reviewing the source code of the framework greatly benefits our endeavor to understand software in-depth, an essential step for ethical hacking. However, we should acknowledge that the openness of open-source platforms does present a double-edged sword. Despite its numerous advantages, it also opens a gateway for potential misuse. The exposure of the source code presents an intimate understanding of a software’s underlying mechanisms, which, while essential for improving and learning, can be exploited if it falls into the wrong hands.Reviewing the framework source code is very helpful for our hacking work. So I should say open source has its dark side. source code provides valuable insight into the underlying mechanisms of software. Extracting information from binaryTypically, Android games developed using the Cocos2D framework incorporate a shared library known as libcocos2dcpp.so. This integral component houses the core logic underlying the game’s operations and interactions, serving as a centerpiece for the game’s design and execution.I plan to conduct a detailed examination of this file in order to glean more comprehensive insights about the underlying mechanics of this Android game. This in-depth analysis will allow me to understand its structure and functionality more precisely. file12$ file libcocos2dcpp.solibcocos2dcpp.so: ELF 32-bit LSB shared object, ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /system/bin/linker, stripped The result derived from executing the file command implies that the file is an ELF file, and is a ARM32 archtecture. GhidraI utilized Ghidra for analyzing the shared library under examination. This comprehensive software reverse-engineering tool revealed that the library exports numerous symbols that can be invoked. A symbol that particularly caught our attention is _ZN7cocos2d14cocos2dVersionEv. This symbol is associated with a C++ function cocos2d::cocos2dVersion(). However, it’s important to note that the symbol name only provides information about the function’s namespace, name, and argument types. We can’t ascertain the return type solely from the symbol’s name. Fortunately though, we have access to the source code. By cross-referencing the function within the source code, I was able to determine that its return type is char*. The following code illustrates the cocos2d version is cocos2d-x 3.3rc0 1234namespace cocos2d { char* cocos2dVersion();}LOG_INFO(&quot; Cocos2d version: %s&quot;, cocos2d::cocos2dVersion()); Once we precisely identify the version of the Cocos2d framework being used, it opens up the possibility to retrieve the exactly corresponding version of the source code. Define C++ classesIn the process of extracting images from asset files, I lean on the capabilities of a particular C++ class called ActionGroupClass during the Ghidra analysis phase. This class not only streamlines the extraction process but also boasts of several utility methods.The following is the class define I infered from Ghidra 12345678910111213141516171819namespace cocos2d{ struct Texture2D;}struct ActionGroupClass{ unsigned char _0x0[0x102]; unsigned short _totalActionCount; ActionGroupClass(); void vQuickLoad(unsigned char*, bool, int, int); void vGetBaseXY(short, float*, float*); int GetTotalStep(short); void vGetVectorXY(short, short, short*, short*); bool GetPictureIndex(short, short, unsigned char*); ~ActionGroupClass(); cocos2d::Texture2D* GetTexture2DwithAction(short, short); }; static_assert(offsetof(ActionGroupClass, _totalActionCount) ==0x102, &quot;_totalActionCount not at offset 0x102&quot;); This class, ActionGroupClass, is designed and implemented by game developers, which means it isn’t found directly within the Cocos2D framework.Game developers have also defined several global variables, each of which is of the ActionGroupClass type. These variables are utilized throughout the game for various purposes, depending on the specific characteristics and methods defined within the ActionGroupClass.We can utilize these global variables to extract images from asset files. In addition, the shared library should contain code within the .init section. This code is responsible for calling the constructor method of the ActionGroupClass on these global variables. This initialization is essential in setting up the initial state for these global instances.In addition, modern C++ provides a way to call a constructor on an already allocated memory. This is called placement new. Here’s how it works:In C++, the new keyword typically allocates memory and then constructs an object in the allocated memory. However, there are times when you want to separate these two operations. For example, when you have already allocated memory and just want to construct an object at that memory location you can use “placement new”.Here is the general syntax: 123456#include &lt;new&gt; ... auto* p = (unsigned char*)&amp;FishActionGroup; auto* fishActionGroup = new((void*)p) ActionGroupClass(); We can use this way to call constructor method in these global variables. Dynamic analysisDynamic analysis involves the live examination of a system while it’s operational. In terms of hacking a cocos2d Android game using the Frida toolkit, dynamic analysis enables us to inspect and alter the game while it’s being actively played. This can provide insights that are not available during static analysis—when the program or game is not running. Read string for a pointer to std::string.When dealing with the Android NDK, there are numerous elements involved when implementing the Standard Template Library (STL). Since I’m utilizing a recent version of the NDK, the conventional method of extracting a string from a std::string variable using std::string::c_str() is unfortunately not applicable. Hence, a different approach is needed. After a detailed analysis of the memory layout connected to a std::string variable within the process, I have developed the following function to accurately extract the required string. 12345const char* getStringCStr(std::string&amp; str){ auto* p = (unsigned char*) &amp;str; auto* s= *(char**)&amp;p[0x00]; return s; } Get RTTIThe shared library has been configured with Run-Time Type Information (RTTI) enabled. This setup allows us to extract RTTI using a pointer referring to a class directly. To streamline this process, I have authored the subsequent function specifically tailored for this task. 123456#include &lt;typeinfo&gt;const char* getInstanceTypeName(void* ptr){ void** p = *(void***)ptr; std::type_info&amp; t =*(std::type_info*)p[-1]; return t.name(); } Extract images from a asset fileMoving forward, let’s deftly invoke the inherent functions of our key class, ActionGroupClass, to systematically acquire all pertinent information concerning the graphic elements. 12345678910111213141516171819202122232425262728char* romdata = read_file_into_memory(&quot;/data/local/tmp/weapon1.rom&quot;) ; if(romdata){ LOG_INFOS(&quot;%p&quot;, romdata); fishActionGroup-&gt;vQuickLoad((unsigned char*)romdata, true, 30, 30); free(romdata); romdata = NULL; auto totalActionCount = fishActionGroup-&gt;_totalActionCount; LOG_INFOS(&quot; totalActionCount %d&quot;, totalActionCount); for(auto action=0; action&lt;totalActionCount; action++){ auto totalStep = fishActionGroup-&gt;GetTotalStep(action); float x, y; fishActionGroup-&gt;vGetBaseXY(action, &amp;x, &amp;y); LOG_INFOS(&quot; action %d ,total step %d %f %f &quot;, action, totalStep, x, y ); short stepx, stepy; for(auto step = 0; step &lt; totalStep; step++){ fishActionGroup-&gt;vGetVectorXY(action, step, &amp;stepx, &amp;stepy); unsigned char pic; auto success = fishActionGroup-&gt;GetPictureIndex(action, step, &amp;pic); LOG_INFOS(&quot; action %d/%d step %d/%d base %f %f step %d %d pic %d &quot;, action, totalActionCount, step, totalStep, x, y, stepx, stepy, pic); auto* tex = fishActionGroup-&gt;GetTexture2DwithAction(action, step); auto w = tex-&gt;getPixelsWide(); auto h = tex-&gt;getPixelsHigh(); auto* format = tex-&gt;getStringForFormat(); LOG_INFOS(&quot; action %d/%d step %d/%d texture %p %d %d %s&quot;, action, totalActionCount, step, totalStep, tex, w, h, format); } } } Here’s an illustrative breakdown of its operations: The first segment is devoted to reading a ROM file, specifically ‘weapon1.rom’, and storing it into memory. The in-memory address of this acquired data is logged for debugging purposes. Next, the vQuickLoad method of fishActionGroup, an instance of ActionGroupClass, is invoked. This quickly loads in the binary content from the ROM data into our action group. Meanwhile, the parameters ‘30’ represent the default size in pixels for each sprite in the action. The memory allocated to ‘romdata’ is subsequently cleared using ‘free’ to prevent memory leaks, and its pointer is nullified for safety. Thereafter, we acquire the total count of actions stored within our action group by calling the _totalActionCount function. For every action, two tasks are performed: Firstly, the total number of steps related to that action are gathered. Secondly, the base coordinates (x, y) for that action are obtained via vGetBaseXY. Each step per action is scrutinized next. This includes determining its directional vector (stepx, stepy) and the picture index related to each step. Moreover, the texture associated with each step of the action is also retrieved. Finally, this section delves into extracting comprehensive details about said texture: the dimensions (width and height in pixels) and the format. This information, alongside other relevant details, is logged for every step in every action. This meticulous process guarantees a thorough understanding of the movements, graphical elements, sizes, and properties involved, which immensely aids in manipulating or changing game assets for your desired outcome as part of your game hacking initiative.After obtaining the pointers to Texture2D, it becomes possible to invoke the built-in functions within the class to save the graphic data to disk. However, elaborating on the specifics of this process falls outside the boundaries of this blog post. Therefore, we won’t delve into that here. ConclusionIn this blog post, we explored the world of hacking Cocos2D Android games using Frida. We emphasized responsible and ethical use of the techniques and tools discussed. We covered static analysis, examining source code, and dynamic analysis for inspecting games while running. We discussed the extraction of images from asset files using the ActionGroupClass. Remember, unauthorized hacking is illegal and unethical. Use this knowledge responsibly to enhance your understanding of software and promote improved security. Happy exploring!","link":"/2023/10/28/Hacking-Cocos2D-Android-Games-using-Frida/"}],"tags":[{"name":"Frida","slug":"Frida","link":"/tags/Frida/"},{"name":"Android","slug":"Android","link":"/tags/Android/"},{"name":"hack","slug":"hack","link":"/tags/hack/"},{"name":"CModule","slug":"CModule","link":"/tags/CModule/"},{"name":"Reverse","slug":"Reverse","link":"/tags/Reverse/"},{"name":"inlinehook","slug":"inlinehook","link":"/tags/inlinehook/"},{"name":"Hacking","slug":"Hacking","link":"/tags/Hacking/"},{"name":"Game","slug":"Game","link":"/tags/Game/"},{"name":"Hack","slug":"Hack","link":"/tags/Hack/"},{"name":"Reverse engineering","slug":"Reverse-engineering","link":"/tags/Reverse-engineering/"},{"name":"ARM","slug":"ARM","link":"/tags/ARM/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"Inline hook","slug":"Inline-hook","link":"/tags/Inline-hook/"},{"name":"Thumb","slug":"Thumb","link":"/tags/Thumb/"},{"name":"NDK","slug":"NDK","link":"/tags/NDK/"},{"name":"hacking","slug":"hacking","link":"/tags/hacking/"},{"name":"c++","slug":"c","link":"/tags/c/"},{"name":"Cocos2d","slug":"Cocos2d","link":"/tags/Cocos2d/"}],"categories":[],"pages":[{"title":"About Me","text":"About MeHello, I’m Meng Xipeng, a Reverse Engineer with over 20+ years of experience spanning across the field of software development and reverse engineering. Over the past two decades, I’ve had the privilege to work on numerous software projects, designing and deploying a variety of systems, tools, and applications that have had a significant impact on diverse industries. In particular, my specialty and passion lie in the field of reverse engineering, where I’ve spent the past decade in honing my expertise. I’ve been able to demystify and decode complex software systems, unveiling the underlying mechanisms that drive them while gaining a profound understanding of their operations. I am adept at disassembling software, methodically examining it for the purpose of debugging, and deciphering how different software pieces function collectively. My expertise spans various reverse engineering tools and techniques, and I have a proven track record of producing robust and efficient solutions. Now, I’m looking for new challenges. I’m specifically interested in reverse engineering projects or remote jobs where I can leverage my extensive knowledge and experience. With my skills, I believe I can contribute a detailed and comprehensive insight into any reverse engineering task, bringing value and efficiency to the project or team I will work with. Feel free to browse the rest of my site to see some of the projects I’ve worked on; and, if you think my skill-set and experience make a good match for your needs, please don’t hesitate to get in touch with me by sending me an email to mengxipeng@gmail.com. I’m looking forward to breaking more codes and creating exciting projects!","link":"/about/index.html"}]}